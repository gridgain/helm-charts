#
# Copyright (C) GridGain Systems. All Rights Reserved.
#  _________        _____ __________________        _____
#  __  ____/___________(_)______  /__  ____/______ ____(_)_______
#  _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
#  / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
#  \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/
#

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "gridgain9.fullname" . }}-update-cmg-job
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "gridgain9.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
  {{- if or .Values.commonAnnotations .Values.annotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.annotations .Values.commonAnnotations ) "context" . ) }}
  {{- toYaml $annotations | nindent 4 }}
  {{- end }}
spec:
  template:
    spec:
      {{- if .Values.affinity }}
      affinity: {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      containers:
      - args:
        - -ec
        - |
          set -x
          
          # Get the number of replicas from the StatefulSet or use default
          REPLICAS=${REPLICAS:-1}
          
                    # Wait for GridGain service to be available and all nodes to be ready
          echo "Waiting for GridGain service to be available..."
          SERVICE_HOST="{{ include "gridgain9.fullname" . }}-headless"
          SERVICE_PORT="{{ .Values.services.headless.ports.management }}"
          
          # Wait for service to be available
          retries=60 # 5 minutes
          while ! timeout 5 bash -c "</dev/tcp/${SERVICE_HOST}/${SERVICE_PORT}" 2>/dev/null; do
            echo "Waiting for GridGain service to be available... (retries left: $retries)"
            retries=$((retries-1))
            if [ "$retries" -eq 0 ]; then
              echo "ERROR: GridGain service did not become available within 5 minutes"
              exit 1
            fi
            sleep 5
          done
          echo "GridGain service is available"
          
          # Wait for last node to be ready using GridGain CLI
          echo "Waiting for last node to be ready..."
          retries=60 # 5 minutes
          while [ $retries -gt 0 ]; do
            # Try to get cluster topology using GridGain CLI
            if /opt/gridgain9cli/bin/gridgain9 cluster topology physical --url=http://${SERVICE_HOST}:${SERVICE_PORT} 2>/dev/null | grep -q "{{ include "gridgain9.fullname" . }}-$((REPLICAS-1))"; then
              echo "All nodes are ready in cluster topology"
              break
            fi
            echo "Waiting for last node to be ready... (retries left: $retries)"
            retries=$((retries-1))
            if [ "$retries" -eq 0 ]; then
              echo "ERROR: Not all nodes appeared in cluster topology within 5 minutes"
              exit 1
            fi
            sleep 5
          done
          
          # Calculate CMG and Metastorage group sizes according to GridGain recommendations
          if [ $REPLICAS -le 3 ]; then
            # For clusters ≤3 nodes: all nodes are used for both CMG and metastorage
            CMG_SIZE=$REPLICAS
          elif [ $REPLICAS -eq 4 ]; then
            # For clusters =4 nodes: three nodes are used (to maintain odd number)
            CMG_SIZE=3
          else
            # For clusters ≥5 nodes: five nodes are used (to balance fault tolerance and overhead)
            CMG_SIZE=5
          fi
          
          # Build CMG node list (first N nodes)
          CMG_NODES=""
          for i in $(seq 0 $((CMG_SIZE-1))); do
            if [ -n "$CMG_NODES" ]; then
              CMG_NODES="$CMG_NODES,{{ include "gridgain9.fullname" . }}-$i"
            else
              CMG_NODES="{{ include "gridgain9.fullname" . }}-$i"
            fi
          done
          
          # Log the approach being used
          echo "Performing CMG node group update"
          echo "Replica count: $REPLICAS"
          echo "CMG size: $CMG_SIZE"
          echo "CMG nodes: $CMG_NODES"
          
          /opt/gridgain9cli/bin/gridgain9 recovery cluster reset --cluster-management-group $CMG_NODES --metastorage-replication-factor $CMG_SIZE --url=http://{{ include "gridgain9.fullname" . }}-headless:{{ .Values.services.headless.ports.management }}
        command:
        - /bin/bash
        # Specify the Docker image with the GridGain 9 CLI and its version.
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        name: update-cmg
        resources:
          {{- toYaml .Values.hookResources | nindent 10 }}
        env:
        - name: REPLICAS
          value: "{{ .Values.replicaCount | default 1 }}"
        volumeMounts:
        {{- if .Values.license.useExisting }}
        - name: {{ printf "%s-%s" (include "gridgain9.fullname" .) "license" }}
          mountPath: {{ .Values.license.mountPath }}
          subPath: {{ .Values.license.useExisting.secretkey }}
          readOnly: true
        {{- else if or .Values.license.createSecret .Values.license.fromFile  }}
        - name: {{ printf "%s-%s" (include "gridgain9.fullname" .) "license" }}
          mountPath: {{ .Values.license.mountPath }}
          subPath: license.conf
          readOnly: true
        {{- end }}
      restartPolicy: Never
      terminationGracePeriodSeconds: 120
      volumes:
      {{- if .Values.license.useExisting }}
      - name: {{ printf "%s-%s" (include "gridgain9.fullname" .) "license" }}
        secret:
          secretName: {{ .Values.license.useExisting.secretname }}
      {{- else if or .Values.license.createSecret .Values.license.fromFile }}
      - name: {{ printf "%s-%s" (include "gridgain9.fullname" .) "license" }}
        secret:
          secretName: {{ printf "%s-%s" (include "gridgain9.fullname" .) "license" }}
      {{- end }} 